searchState.loadedDescShard("db_sqlx_postgres", 0, "Use an existing database pool\nConnect to database\nexisting connection\nfresh connection\nRepresents notification\nAdd levels to captcha\nAdd traffic configuration\nrecord PoW timing\nCreate psuedo ID against campaign ID to publish analytics\nfetch PoW analytics\nGet all psuedo IDs\nGet campaign ID from psuedo ID\nGet psuedo ID from campaign ID\ncheck if captcha exists\ncreate new captcha\ncreate new notification\nDelete captcha\nDelete all levels of a captcha\nDelete traffic configuration\ndelete a user\ncheck if email exists\nError-handling utilities\nfetch PoWConfig fetches\nfetch PoWConfig confirms\nfetch PoWConfig solves\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all easy captcha configurations on instance\nget all unread notifications\nGet all captchas belonging to user\nGet captcha config\nGet captcha’s cooldown period\nGet captcha levels\nget user email\nGet maximum nonce tracked so far for captcha levels\nget a user’s password\nget a user’s secret\nget a user’s secret from a captcha key\nGet traffic configuration\nheading of the notification\ndb assigned ID of the notification\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nmark a notification read\nmessage of the notification\nreceiver name  of the notification\nping DB\nwhen notification was received\nrecord PoWConfig confirms\nrecord PoWConfig fetches\nrecord PoWConfig solves\nregister a new user\nGet the entry at a location in the list of analytics …\nGet number of analytics entries that are under a certain …\nupdate captcha key; doesn’t change metadata\nupdate captcha metadata; doesn’t change captcha key\nupdate a user’s email\nTrack maximum nonce received against captcha levels\nupdate user’s password\nupdate a user’s secret\nupdate username\ncheck if username exists\nAccount not found\nData required to add notification\nError occurred within the <code>Any</code> driver mapping to/from the …\nConvenience type alias for grouping driver-specific errors\nData representing a captcha\nCaptcha key is taken\nCaptcha not found\nTrait to clone MCDatabase\nError occurred while decoding a value from a specific …\nColumn index was out of bounds.\nNo column found for the given name.\nError occurred while parsing a connection string.\ndatabase connection type\nCreate database connection\ndata required to create new captcha\nLog Proof-of-Work CAPTCHA performance analytics\nError data structure grouping various error subtypes\nerrors that are specific to a database implementation\nDatabase operations trait(migrations, pool creation and …\nGeneric result data structure\nError returned from the database.\nError occurred while decoding a value.\nRepresents Easy captcha configuration\nemail as login\nEmail is taken\nError occured while encoding a value.\nContains the error value\nRepresents all the ways a method can fail within SQLx.\nGet database connection\nOne or more of the arguments to the called function was …\nError communicating with the database backend.\nLevel struct that describes threshold-difficulty factor …\ntypes of credentials used as identifiers during login\nmCaptcha’s database requirements. To implement support …\ndatabase migrations\ntype encapsulating username and hashed password of a user\nRepresents notification\nNotification not found\nContains the success value\nProof-of-Work CAPTCHA performance analytics\ndatabase specific pool-type\n<code>Pool::close</code> was called while we were waiting in …\nA <code>Pool::acquire</code> timed out due to connections not becoming …\nUnexpected or invalid data encountered while communicating …\nData required to register a new user\nNo rows returned by a query that expected to return at …\ndatastructure representing a user’s secret\nSecret is taken\nCaptcha statistics with time recorded in UNIX epoch formats\nError occurred while attempting to establish a TLS …\nUser’s traffic pattern; used in generating a captcha …\nTraffic pattern not found\nType in query doesn’t exist. Likely due to typo or …\ndata required to update them email of a user\nusername as login\nUsername is taken\nA background worker has crashed.\nAdd levels to captcha\nAdd traffic configuration\nrecord PoW timing\nGet publishing status of pow analytics for captcha ID/ …\nCreate psuedo ID against campaign ID to publish analytics\nDelete all records for campaign\nfetch PoW analytics\nGet all psuedo IDs\nGet campaign ID from psuedo ID\nGet psuedo ID from campaign ID\naverage traffic of user’s website\ntraffic that bought the user’s website down; optional\ncheck if captcha exists\nclone DB\ntimes at which the configuration were fetched\nDatabase assigned ID\ntimes at which the PoW token was verified\ndatabase specific error-type create connection pool\ncreate new captcha\ncreate new notification\nDelete captcha\nDelete all levels of a captcha\nDelete traffic configuration\ndelete a user\ncaptcha description\ndescription of the captcha\ndescription of the captcha\ndifficulty factor for which the proof was generated\ndifficulty factor for which the proof was generated\ncool down duration\ncool down duration\nOptionally, email of new use\ncheck if email exists\nrepresents all the ways a trait can fail using this crate\nfetch PoWConfig fetches\nfetch PoWConfig confirms\nfetch PoWConfig solves\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nnotification sender\nGet all easy captcha configurations on instance\nget all unread notifications\nGet all captchas belonging to user\nGet captcha config\nGet captcha’s cooldown period\nGet captcha levels\ndatabase specific error-type get connection from …\nget user email\nGet maximum nonce tracked so far for captcha levels\nget a user’s password\nget a user’s secret\nget a user’s secret from a captcha key\nGet traffic configuration\nhashed password of new use\nhashed password\nheading of the notification\nheading of the notification\nlog ID\ndb assigned ID of the notification\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncaptcha key/sitekey\nsecret key of the captcha\nsecret key of the captcha\nmark a notification read\nmessage of the notification\nmessage of the notification\ndatabase specific error-type run migrations\nreceiver name  of the notification\nnew email address of the user\nmeta operations like migration and connecting to a database\nthe peak traffic that the user’s website can handle\nping DB\nuseful imports for users working with a supported database\nwhen notification was received\nrecord PoWConfig confirms\nrecord PoWConfig fetches\nrecord PoWConfig solves\nregister a new user\nsecret of new user\nuser’s secret\ntimes at which the PoW was solved\nGet the entry at a location in the list of analytics …\nGet number of analytics entries that are under a certain …\nTest utilities\ntime taken to generate proof\ntime taken to generate proof\nwho is the notification addressed to?\ntraffic pattern of easy captcha\nupdate captcha key; doesn’t change metadata\nupdate captcha metadata; doesn’t change captcha key\nupdate a user’s email\nTrack maximum nonce received against captcha levels\nupdate user’s password\nupdate a user’s secret\nupdate username\nusername of new user\nusername of the user\nusername\nOwner of the captcha configuration\ncheck if username exists\nworker/client type: wasm, javascript, python, etc.\nworker/client type: wasm, javascript, python, etc.\nAccount not found\nConvenience type alias for grouping driver-specific errors\nCaptcha key is taken\nCaptcha not found\nError data structure grouping various error subtypes\nerrors that are specific to a database implementation\nGeneric result data structure\nEmail is taken\nContains the error value\nNotification not found\nContains the success value\nSecret is taken\nTraffic pattern not found\nUsername is taken\ndatabase connection type\nCreate database connection\nDatabase operations trait(migrations, pool creation and …\nGet database connection\ndatabase migrations\ndatabase specific pool-type\ndatabase specific error-type create connection pool\ndatabase specific error-type get connection from …\ndatabase specific error-type run migrations\nAccount not found\nData required to add notification\nConvenience type alias for grouping driver-specific errors\nData representing a captcha\nCaptcha key is taken\nCaptcha not found\nTrait to clone MCDatabase\ndatabase connection type\nCreate database connection\ndata required to create new captcha\nLog Proof-of-Work CAPTCHA performance analytics\nError data structure grouping various error subtypes\nerrors that are specific to a database implementation\nDatabase operations trait(migrations, pool creation and …\nGeneric result data structure\nRepresents Easy captcha configuration\nemail as login\nEmail is taken\nContains the error value\nGet database connection\nLevel struct that describes threshold-difficulty factor …\ntypes of credentials used as identifiers during login\nmCaptcha’s database requirements. To implement support …\ndatabase migrations\ntype encapsulating username and hashed password of a user\nRepresents notification\nNotification not found\nContains the success value\nProof-of-Work CAPTCHA performance analytics\ndatabase specific pool-type\nData required to register a new user\ndatastructure representing a user’s secret\nSecret is taken\nCaptcha statistics with time recorded in UNIX epoch formats\nUser’s traffic pattern; used in generating a captcha …\nTraffic pattern not found\ndata required to update them email of a user\nusername as login\nUsername is taken\nAdd levels to captcha\nAdd traffic configuration\nrecord PoW timing\nGet publishing status of pow analytics for captcha ID/ …\nCreate psuedo ID against campaign ID to publish analytics\nDelete all records for campaign\nfetch PoW analytics\nGet all psuedo IDs\nGet campaign ID from psuedo ID\nGet psuedo ID from campaign ID\naverage traffic of user’s website\ntraffic that bought the user’s website down; optional\ncheck if captcha exists\nclone DB\ntimes at which the configuration were fetched\nDatabase assigned ID\ntimes at which the PoW token was verified\ndatabase specific error-type create connection pool\ncreate new captcha\ncreate new notification\nDelete captcha\nDelete all levels of a captcha\nDelete traffic configuration\ndelete a user\ncaptcha description\ndescription of the captcha\ndescription of the captcha\nuseful imports for supporting a new database\ndifficulty factor for which the proof was generated\ndifficulty factor for which the proof was generated\ncool down duration\ncool down duration\nOptionally, email of new use\ncheck if email exists\nfetch PoWConfig fetches\nfetch PoWConfig confirms\nfetch PoWConfig solves\nnotification sender\nGet all easy captcha configurations on instance\nget all unread notifications\nGet all captchas belonging to user\nGet captcha config\nGet captcha’s cooldown period\nGet captcha levels\ndatabase specific error-type get connection from …\nget user email\nGet maximum nonce tracked so far for captcha levels\nget a user’s password\nget a user’s secret\nget a user’s secret from a captcha key\nGet traffic configuration\nhashed password of new use\nhashed password\nheading of the notification\nheading of the notification\nlog ID\ndb assigned ID of the notification\ncaptcha key/sitekey\nsecret key of the captcha\nsecret key of the captcha\nmark a notification read\nmessage of the notification\nmessage of the notification\ndatabase specific error-type run migrations\nreceiver name  of the notification\nnew email address of the user\nthe peak traffic that the user’s website can handle\nping DB\nwhen notification was received\nrecord PoWConfig confirms\nrecord PoWConfig fetches\nrecord PoWConfig solves\nregister a new user\nsecret of new user\nuser’s secret\ntimes at which the PoW was solved\nGet the entry at a location in the list of analytics …\nGet number of analytics entries that are under a certain …\ntime taken to generate proof\ntime taken to generate proof\nwho is the notification addressed to?\ntraffic pattern of easy captcha\nupdate captcha key; doesn’t change metadata\nupdate captcha metadata; doesn’t change captcha key\nupdate a user’s email\nTrack maximum nonce received against captcha levels\nupdate user’s password\nupdate a user’s secret\nupdate username\nusername of new user\nusername of the user\nusername\nOwner of the captcha configuration\ncheck if username exists\nworker/client type: wasm, javascript, python, etc.\nworker/client type: wasm, javascript, python, etc.\nAccount not found\nData required to add notification\nConvenience type alias for grouping driver-specific errors\nData representing a captcha\nCaptcha key is taken\nCaptcha not found\nTrait to clone MCDatabase\ndatabase connection type\nCreate database connection\ndata required to create new captcha\nLog Proof-of-Work CAPTCHA performance analytics\nError data structure grouping various error subtypes\nerrors that are specific to a database implementation\nDatabase operations trait(migrations, pool creation and …\nGeneric result data structure\nRepresents Easy captcha configuration\nemail as login\nEmail is taken\nContains the error value\nGet database connection\nLevel struct that describes threshold-difficulty factor …\ntypes of credentials used as identifiers during login\nmCaptcha’s database requirements. To implement support …\ndatabase migrations\ntype encapsulating username and hashed password of a user\nRepresents notification\nNotification not found\nContains the success value\nProof-of-Work CAPTCHA performance analytics\ndatabase specific pool-type\nData required to register a new user\ndatastructure representing a user’s secret\nSecret is taken\nCaptcha statistics with time recorded in UNIX epoch formats\nUser’s traffic pattern; used in generating a captcha …\nTraffic pattern not found\ndata required to update them email of a user\nusername as login\nUsername is taken\nAdd levels to captcha\nAdd traffic configuration\nrecord PoW timing\nGet publishing status of pow analytics for captcha ID/ …\nCreate psuedo ID against campaign ID to publish analytics\nDelete all records for campaign\nfetch PoW analytics\nGet all psuedo IDs\nGet campaign ID from psuedo ID\nGet psuedo ID from campaign ID\naverage traffic of user’s website\ntraffic that bought the user’s website down; optional\ncheck if captcha exists\nclone DB\ntimes at which the configuration were fetched\nDatabase assigned ID\ntimes at which the PoW token was verified\ndatabase specific error-type create connection pool\ncreate new captcha\ncreate new notification\nDelete captcha\nDelete all levels of a captcha\nDelete traffic configuration\ndelete a user\ncaptcha description\ndescription of the captcha\ndescription of the captcha\ndifficulty factor for which the proof was generated\ndifficulty factor for which the proof was generated\ncool down duration\ncool down duration\nOptionally, email of new use\ncheck if email exists\nfetch PoWConfig fetches\nfetch PoWConfig confirms\nfetch PoWConfig solves\nnotification sender\nGet all easy captcha configurations on instance\nget all unread notifications\nGet all captchas belonging to user\nGet captcha config\nGet captcha’s cooldown period\nGet captcha levels\ndatabase specific error-type get connection from …\nget user email\nGet maximum nonce tracked so far for captcha levels\nget a user’s password\nget a user’s secret\nget a user’s secret from a captcha key\nGet traffic configuration\nhashed password of new use\nhashed password\nheading of the notification\nheading of the notification\nlog ID\ndb assigned ID of the notification\ncaptcha key/sitekey\nsecret key of the captcha\nsecret key of the captcha\nmark a notification read\nmessage of the notification\nmessage of the notification\ndatabase specific error-type run migrations\nreceiver name  of the notification\nnew email address of the user\nthe peak traffic that the user’s website can handle\nping DB\nwhen notification was received\nrecord PoWConfig confirms\nrecord PoWConfig fetches\nrecord PoWConfig solves\nregister a new user\nsecret of new user\nuser’s secret\ntimes at which the PoW was solved\nGet the entry at a location in the list of analytics …\nGet number of analytics entries that are under a certain …\ntime taken to generate proof\ntime taken to generate proof\nwho is the notification addressed to?\ntraffic pattern of easy captcha\nupdate captcha key; doesn’t change metadata\nupdate captcha metadata; doesn’t change captcha key\nupdate a user’s email\nTrack maximum nonce received against captcha levels\nupdate user’s password\nupdate a user’s secret\nupdate username\nusername of new user\nusername of the user\nusername\nOwner of the captcha configuration\ncheck if username exists\nworker/client type: wasm, javascript, python, etc.\nworker/client type: wasm, javascript, python, etc.\nlevels for complex captcha config\neasy traffic pattern\ntest all database functions\nmap postgres errors to DBError types\nmap custom row not found error to DB error")