(function() {
    var type_impls = Object.fromEntries([["mcaptcha",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncSmtpTransport%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/smtp/async_transport.rs.html#112-114\">Source</a><a href=\"#impl-AsyncSmtpTransport%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransport.html\" title=\"struct lettre::transport::smtp::async_transport::AsyncSmtpTransport\">AsyncSmtpTransport</a>&lt;E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/executor/trait.Executor.html\" title=\"trait lettre::executor::Executor\">Executor</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.relay\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/smtp/async_transport.rs.html#135\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransport.html#tymethod.relay\" class=\"fn\">relay</a>(relay: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransportBuilder.html\" title=\"struct lettre::transport::smtp::async_transport::AsyncSmtpTransportBuilder\">AsyncSmtpTransportBuilder</a>, <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/error/struct.Error.html\" title=\"struct lettre::transport::smtp::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Simple and secure transport, using TLS connections to communicate with the SMTP server</p>\n<p>The right option for most SMTP servers.</p>\n<p>Creates an encrypted transport over submissions port, using the provided domain\nto validate TLS certificates.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.starttls_relay\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/smtp/async_transport.rs.html#169\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransport.html#tymethod.starttls_relay\" class=\"fn\">starttls_relay</a>(relay: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransportBuilder.html\" title=\"struct lettre::transport::smtp::async_transport::AsyncSmtpTransportBuilder\">AsyncSmtpTransportBuilder</a>, <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/error/struct.Error.html\" title=\"struct lettre::transport::smtp::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Simple and secure transport, using STARTTLS to obtain encrypted connections</p>\n<p>Alternative to <a href=\"#method.relay\"><code>AsyncSmtpTransport::relay</code></a>, for SMTP servers\nthat don’t take SMTPS connections.</p>\n<p>Creates an encrypted transport over submissions port, by first connecting using\nan unencrypted connection and then upgrading it with STARTTLS. The provided\ndomain is used to validate TLS certificates.</p>\n<p>An error is returned if the connection can’t be upgraded. No credentials\nor emails will be sent to the server, protecting from downgrade attacks.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unencrypted_localhost\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/smtp/async_transport.rs.html#182\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransport.html#tymethod.unencrypted_localhost\" class=\"fn\">unencrypted_localhost</a>() -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransport.html\" title=\"struct lettre::transport::smtp::async_transport::AsyncSmtpTransport\">AsyncSmtpTransport</a>&lt;E&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new local SMTP client to port 25</p>\n<p>Shortcut for local unencrypted relay (typical local email daemon that will handle relaying)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.builder_dangerous\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/smtp/async_transport.rs.html#198\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransport.html#tymethod.builder_dangerous\" class=\"fn\">builder_dangerous</a>&lt;T&gt;(server: T) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransportBuilder.html\" title=\"struct lettre::transport::smtp::async_transport::AsyncSmtpTransportBuilder\">AsyncSmtpTransportBuilder</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new SMTP client</p>\n<p>Defaults are:</p>\n<ul>\n<li>No authentication</li>\n<li>No TLS</li>\n<li>A 60-seconds timeout for smtp commands</li>\n<li>Port 25</li>\n</ul>\n<p>Consider using <a href=\"#method.relay\"><code>AsyncSmtpTransport::relay</code></a> or\n<a href=\"#method.starttls_relay\"><code>AsyncSmtpTransport::starttls_relay</code></a> instead,\nif possible.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_url\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/smtp/async_transport.rs.html#306\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransport.html#tymethod.from_url\" class=\"fn\">from_url</a>(\n    connection_url: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransportBuilder.html\" title=\"struct lettre::transport::smtp::async_transport::AsyncSmtpTransportBuilder\">AsyncSmtpTransportBuilder</a>, <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/error/struct.Error.html\" title=\"struct lettre::transport::smtp::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>AsyncSmtpTransportBuilder</code> from a connection URL</p>\n<p>The protocol, credentials, host, port and EHLO name can be provided\nin a single URL. This may be simpler than having to configure SMTP\nthrough multiple configuration parameters and then having to pass\nthose options to lettre.</p>\n<p>The URL is created in the following way:\n<code>scheme://user:pass@hostname:port/ehlo-name?tls=TLS</code>.</p>\n<p><code>user</code> (Username) and <code>pass</code> (Password) are optional in case the\nSMTP relay doesn’t require authentication. When <code>port</code> is not\nconfigured it is automatically determined based on the <code>scheme</code>.\n<code>ehlo-name</code> optionally overwrites the hostname sent for the EHLO\ncommand. <code>TLS</code> controls whether STARTTLS is simply enabled\n(<code>opportunistic</code> - not enough to prevent man-in-the-middle attacks)\nor <code>required</code> (require the server to upgrade the connection to\nSTARTTLS, otherwise fail on suspicion of main-in-the-middle attempt).</p>\n<p>Use the following table to construct your SMTP url:</p>\n<div><table><thead><tr><th>scheme</th><th><code>tls</code> query parameter</th><th>example</th><th>default port</th><th>remarks</th></tr></thead><tbody>\n<tr><td><code>smtps</code></td><td>unset</td><td><code>smtps://user:pass@hostname:port</code></td><td>465</td><td>SMTP over TLS, recommended method</td></tr>\n<tr><td><code>smtp</code></td><td><code>required</code></td><td><code>smtp://user:pass@hostname:port?tls=required</code></td><td>587</td><td>SMTP with STARTTLS required, when SMTP over TLS is not available</td></tr>\n<tr><td><code>smtp</code></td><td><code>opportunistic</code></td><td><code>smtp://user:pass@hostname:port?tls=opportunistic</code></td><td>587</td><td>SMTP with optionally STARTTLS when supported by the server. Not suitable for production use: vulnerable to a man-in-the-middle attack</td></tr>\n<tr><td><code>smtp</code></td><td>unset</td><td><code>smtp://user:pass@hostname:port</code></td><td>587</td><td>Always unencrypted SMTP. Not suitable for production use: sends all data unencrypted</td></tr>\n</tbody></table>\n</div>\n<p>IMPORTANT: some parameters like <code>user</code> and <code>pass</code> cannot simply\nbe concatenated to construct the final URL because special characters\ncontained within the parameter may confuse the URL decoder.\nManually URL encode the parameters before concatenating them or use\na proper URL encoder, like the following cargo script:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>#!/usr/bin/env cargo\n\n<span class=\"doccomment\">//! ```cargo\n//! [dependencies]\n//! url = \"2\"\n//! ```\n\n</span><span class=\"kw\">use </span>url::Url;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"comment\">// don't touch this line\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>url = Url::parse(<span class=\"string\">\"foo://bar\"</span>).unwrap();\n\n    <span class=\"comment\">// configure the scheme (`smtp` or `smtps`) here.\n    </span>url.set_scheme(<span class=\"string\">\"smtps\"</span>).unwrap();\n    <span class=\"comment\">// configure the username and password.\n    // remove the following two lines if unauthenticated.\n    </span>url.set_username(<span class=\"string\">\"username\"</span>).unwrap();\n    url.set_password(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"password\"</span>)).unwrap();\n    <span class=\"comment\">// configure the hostname\n    </span>url.set_host(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"smtp.example.com\"</span>)).unwrap();\n    <span class=\"comment\">// configure the port - only necessary if using a non-default port\n    </span>url.set_port(<span class=\"prelude-val\">Some</span>(<span class=\"number\">465</span>)).unwrap();\n    <span class=\"comment\">// configure the EHLO name\n    </span>url.set_path(<span class=\"string\">\"ehlo-name\"</span>);\n\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{url}\"</span>);\n}</code></pre></div>\n<p>The connection URL can then be used in the following way:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>lettre::{\n    message::header::ContentType, transport::smtp::authentication::Credentials,\n    AsyncSmtpTransport, AsyncTransport, Message, Tokio1Executor,\n};\n\n<span class=\"kw\">let </span>email = Message::builder()\n    .from(<span class=\"string\">\"NoBody &lt;nobody@domain.tld&gt;\"</span>.parse().unwrap())\n    .reply_to(<span class=\"string\">\"Yuin &lt;yuin@domain.tld&gt;\"</span>.parse().unwrap())\n    .to(<span class=\"string\">\"Hei &lt;hei@domain.tld&gt;\"</span>.parse().unwrap())\n    .subject(<span class=\"string\">\"Happy new year\"</span>)\n    .header(ContentType::TEXT_PLAIN)\n    .body(String::from(<span class=\"string\">\"Be happy!\"</span>))\n    .unwrap();\n\n<span class=\"comment\">// Open a remote connection to gmail\n</span><span class=\"kw\">let </span>mailer: AsyncSmtpTransport&lt;Tokio1Executor&gt; =\n    AsyncSmtpTransport::&lt;Tokio1Executor&gt;::from_url(\n        <span class=\"string\">\"smtps://username:password@smtp.example.com:465\"</span>,\n    )<span class=\"question-mark\">?\n    </span>.build();\n\n<span class=\"comment\">// Send the email\n</span>mailer.send(email).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.test_connection\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/smtp/async_transport.rs.html#314\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransport.html#tymethod.test_connection\" class=\"fn\">test_connection</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/error/struct.Error.html\" title=\"struct lettre::transport::smtp::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tests the SMTP connection</p>\n<p><code>test_connection()</code> tests the connection by using the SMTP NOOP command.\nThe connection is closed afterward if a connection pool is not used.</p>\n</div></details></div></details>",0,"mcaptcha::data::Mailer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncTransport-for-AsyncSmtpTransport%3CTokio1Executor%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/smtp/async_transport.rs.html#67\">Source</a><a href=\"#impl-AsyncTransport-for-AsyncSmtpTransport%3CTokio1Executor%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/trait.AsyncTransport.html\" title=\"trait lettre::transport::AsyncTransport\">AsyncTransport</a> for <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransport.html\" title=\"struct lettre::transport::smtp::async_transport::AsyncSmtpTransport\">AsyncSmtpTransport</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/executor/struct.Tokio1Executor.html\" title=\"struct lettre::executor::Tokio1Executor\">Tokio1Executor</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.send_raw\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/smtp/async_transport.rs.html#66\">Source</a><a href=\"#method.send_raw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/trait.AsyncTransport.html#tymethod.send_raw\" class=\"fn\">send_raw</a>&lt;'life0, 'life1, 'life2, 'async_trait&gt;(\n    &amp;'life0 self,\n    envelope: &amp;'life1 <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/address/envelope/struct.Envelope.html\" title=\"struct lettre::address::envelope::Envelope\">Envelope</a>,\n    email: &amp;'life2 [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;<a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransport.html\" title=\"struct lettre::transport::smtp::async_transport::AsyncSmtpTransport\">AsyncSmtpTransport</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/executor/struct.Tokio1Executor.html\" title=\"struct lettre::executor::Tokio1Executor\">Tokio1Executor</a>&gt; as <a class=\"trait\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/trait.AsyncTransport.html\" title=\"trait lettre::transport::AsyncTransport\">AsyncTransport</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/trait.AsyncTransport.html#associatedtype.Ok\" title=\"type lettre::transport::AsyncTransport::Ok\">Ok</a>, &lt;<a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransport.html\" title=\"struct lettre::transport::smtp::async_transport::AsyncSmtpTransport\">AsyncSmtpTransport</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/executor/struct.Tokio1Executor.html\" title=\"struct lettre::executor::Tokio1Executor\">Tokio1Executor</a>&gt; as <a class=\"trait\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/trait.AsyncTransport.html\" title=\"trait lettre::transport::AsyncTransport\">AsyncTransport</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/trait.AsyncTransport.html#associatedtype.Error\" title=\"type lettre::transport::AsyncTransport::Error\">Error</a>&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'async_trait&gt;&gt;<div class=\"where\">where\n    'life0: 'async_trait,\n    'life1: 'async_trait,\n    'life2: 'async_trait,\n    <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransport.html\" title=\"struct lettre::transport::smtp::async_transport::AsyncSmtpTransport\">AsyncSmtpTransport</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/executor/struct.Tokio1Executor.html\" title=\"struct lettre::executor::Tokio1Executor\">Tokio1Executor</a>&gt;: 'async_trait,</div></h4></section></summary><div class=\"docblock\"><p>Sends an email</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Ok\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/smtp/async_transport.rs.html#68\">Source</a><a href=\"#associatedtype.Ok\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/trait.AsyncTransport.html#associatedtype.Ok\" class=\"associatedtype\">Ok</a> = <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/response/struct.Response.html\" title=\"struct lettre::transport::smtp::response::Response\">Response</a></h4></section></summary><div class='docblock'>Response produced by the Transport</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/smtp/async_transport.rs.html#69\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/trait.AsyncTransport.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/error/struct.Error.html\" title=\"struct lettre::transport::smtp::error::Error\">Error</a></h4></section></summary><div class='docblock'>Error produced by the Transport</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shutdown\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/smtp/async_transport.rs.html#66\">Source</a><a href=\"#method.shutdown\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/trait.AsyncTransport.html#method.shutdown\" class=\"fn\">shutdown</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 self,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'async_trait&gt;&gt;<div class=\"where\">where\n    'life0: 'async_trait,\n    <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransport.html\" title=\"struct lettre::transport::smtp::async_transport::AsyncSmtpTransport\">AsyncSmtpTransport</a>&lt;<a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/executor/struct.Tokio1Executor.html\" title=\"struct lettre::executor::Tokio1Executor\">Tokio1Executor</a>&gt;: 'async_trait,</div></h4></section></summary><div class='docblock'>Shuts down the transport. Future calls to <a href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/trait.AsyncTransport.html#method.send\" title=\"method lettre::transport::AsyncTransport::send::send\"><code>Self::send</code></a> and\n<a href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/trait.AsyncTransport.html#tymethod.send_raw\" title=\"method lettre::transport::AsyncTransport::send_raw::send_raw\"><code>Self::send_raw</code></a> might fail.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/mod.rs.html#152\">Source</a><a href=\"#method.send\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/trait.AsyncTransport.html#method.send\" class=\"fn\">send</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 self,\n    message: <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/message/struct.Message.html\" title=\"struct lettre::message::Message\">Message</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/trait.AsyncTransport.html#associatedtype.Ok\" title=\"type lettre::transport::AsyncTransport::Ok\">Ok</a>, Self::<a class=\"associatedtype\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/trait.AsyncTransport.html#associatedtype.Error\" title=\"type lettre::transport::AsyncTransport::Error\">Error</a>&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'async_trait&gt;&gt;<div class=\"where\">where\n    'life0: 'async_trait,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'async_trait,</div></h4></section></summary><div class='docblock'>Sends the email</div></details></div></details>","AsyncTransport","mcaptcha::data::Mailer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-AsyncSmtpTransport%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/smtp/async_transport.rs.html#334-336\">Source</a><a href=\"#impl-Clone-for-AsyncSmtpTransport%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransport.html\" title=\"struct lettre::transport::smtp::async_transport::AsyncSmtpTransport\">AsyncSmtpTransport</a>&lt;E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/executor/trait.Executor.html\" title=\"trait lettre::executor::Executor\">Executor</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/smtp/async_transport.rs.html#338\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransport.html\" title=\"struct lettre::transport::smtp::async_transport::AsyncSmtpTransport\">AsyncSmtpTransport</a>&lt;E&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","mcaptcha::data::Mailer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-AsyncSmtpTransport%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/smtp/async_transport.rs.html#326\">Source</a><a href=\"#impl-Debug-for-AsyncSmtpTransport%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/transport/smtp/async_transport/struct.AsyncSmtpTransport.html\" title=\"struct lettre::transport::smtp::async_transport::AsyncSmtpTransport\">AsyncSmtpTransport</a>&lt;E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://docs.rs/crate/lettre/0.11.18/lettre/executor/trait.Executor.html\" title=\"trait lettre::executor::Executor\">Executor</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/crate/lettre/0.11.18/src/lettre/transport/smtp/async_transport.rs.html#327\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","mcaptcha::data::Mailer"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[30416]}