(function() {
    var type_impls = Object.fromEntries([["mcaptcha",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Alt%3CI,+Output,+Error%3E-for-(Alt2,+Alt3)\" class=\"impl\"><a href=\"#impl-Alt%3CI,+Output,+Error%3E-for-(Alt2,+Alt3)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, Output, Error, Alt2, Alt3&gt; Alt&lt;I, Output, Error&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(Alt2, Alt3)</a><div class=\"where\">where\n    I: Stream,\n    Error: ParserError&lt;I&gt;,\n    Alt2: Parser&lt;I, Output, Error&gt;,\n    Alt3: Parser&lt;I, Output, Error&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.choice\" class=\"method trait-impl\"><a href=\"#method.choice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">choice</a>(&amp;mut self, input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Output, Error&gt;</h4></section></summary><div class='docblock'>Tests each parser in the tuple and returns the result of the first one that succeeds</div></details></div></details>","Alt<I, Output, Error>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsULE-for-(A,+B)\" class=\"impl\"><a href=\"#impl-AsULE-for-(A,+B)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; AsULE for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a><div class=\"where\">where\n    A: AsULE,\n    B: AsULE,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.ULE\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ULE\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">ULE</a> = Tuple2ULE&lt;&lt;A as AsULE&gt;::ULE, &lt;B as AsULE&gt;::ULE&gt;</h4></section></summary><div class='docblock'>The ULE type corresponding to <code>Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_unaligned\" class=\"method trait-impl\"><a href=\"#method.to_unaligned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_unaligned</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a> as AsULE&gt;::ULE</h4></section></summary><div class='docblock'>Converts from <code>Self</code> to <code>Self::ULE</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_unaligned\" class=\"method trait-impl\"><a href=\"#method.from_unaligned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_unaligned</a>(unaligned: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a> as AsULE&gt;::ULE) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a></h4></section></summary><div class='docblock'>Converts from <code>Self::ULE</code> to <code>Self</code>. <a>Read more</a></div></details></div></details>","AsULE","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Bounded-for-(S,+T)\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/bounds.rs.html#112\">Source</a><a href=\"#impl-Bounded-for-(S,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, T&gt; <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/bounds/trait.Bounded.html\" title=\"trait num_traits::bounds::Bounded\">Bounded</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(S, T)</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/bounds/trait.Bounded.html\" title=\"trait num_traits::bounds::Bounded\">Bounded</a>,\n    T: <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/bounds/trait.Bounded.html\" title=\"trait num_traits::bounds::Bounded\">Bounded</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/bounds.rs.html#112\">Source</a><a href=\"#method.min_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/bounds/trait.Bounded.html#tymethod.min_value\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(S, T)</a></h4></section></summary><div class='docblock'>Returns the smallest finite number this type can represent</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/bounds.rs.html#112\">Source</a><a href=\"#method.max_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/bounds/trait.Bounded.html#tymethod.max_value\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(S, T)</a></h4></section></summary><div class='docblock'>Returns the largest finite number this type can represent</div></details></div></details>","Bounded","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Chain%3CT%3E-for-(A,+T)\" class=\"impl\"><a href=\"#impl-Chain%3CT%3E-for-(A,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; Chain&lt;T&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, T)</a><div class=\"where\">where\n    A: Chain&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method trait-impl\"><a href=\"#method.len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>The number of items that this chain link consists of.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append_to\" class=\"method trait-impl\"><a href=\"#method.append_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">append_to</a>(self, v: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Append the elements in this link to the chain.</div></details></div></details>","Chain<T>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ChoiceParser%3CInput%3E-for-(Y,+Z)\" class=\"impl\"><a href=\"#impl-ChoiceParser%3CInput%3E-for-(Y,+Z)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Input, Output, Y, Z&gt; ChoiceParser&lt;Input&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(Y, Z)</a><div class=\"where\">where\n    Input: Stream,\n    Y: Parser&lt;Input, Output = Output&gt;,\n    Z: Parser&lt;Input, Output = Output&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = Output</h4></section><section id=\"associatedtype.PartialState\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PartialState\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">PartialState</a> = Y&lt;&lt;Y as Parser&lt;Input&gt;&gt;::PartialState, &lt;Z as Parser&lt;Input&gt;&gt;::PartialState&gt;</h4></section><section id=\"method.parse_partial\" class=\"method trait-impl\"><a href=\"#method.parse_partial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_partial</a>(\n    &amp;mut self,\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut Input</a>,\n    state: &amp;mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(Y, Z)</a> as ChoiceParser&lt;Input&gt;&gt;::PartialState,\n) -&gt; ParseResult&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(Y, Z)</a> as ChoiceParser&lt;Input&gt;&gt;::Output, &lt;Input as StreamOnce&gt;::Error&gt;</h4></section><section id=\"method.parse_first\" class=\"method trait-impl\"><a href=\"#method.parse_first\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_first</a>(\n    &amp;mut self,\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut Input</a>,\n    state: &amp;mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(Y, Z)</a> as ChoiceParser&lt;Input&gt;&gt;::PartialState,\n) -&gt; ParseResult&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(Y, Z)</a> as ChoiceParser&lt;Input&gt;&gt;::Output, &lt;Input as StreamOnce&gt;::Error&gt;</h4></section><section id=\"method.parse_mode_choice\" class=\"method trait-impl\"><a href=\"#method.parse_mode_choice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_mode_choice</a>&lt;Mode&gt;(\n    &amp;mut self,\n    mode: Mode,\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut Input</a>,\n    state: &amp;mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(Y, Z)</a> as ChoiceParser&lt;Input&gt;&gt;::PartialState,\n) -&gt; ParseResult&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(Y, Z)</a> as ChoiceParser&lt;Input&gt;&gt;::Output, &lt;Input as StreamOnce&gt;::Error&gt;<div class=\"where\">where\n    Mode: ParseMode,</div></h4></section><section id=\"method.add_error_choice\" class=\"method trait-impl\"><a href=\"#method.add_error_choice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">add_error_choice</a>(\n    &amp;mut self,\n    error: &amp;mut Tracked&lt;&lt;Input as StreamOnce&gt;::Error&gt;,\n)</h4></section></div></details>","ChoiceParser<Input>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ContainsToken%3CT%3E-for-(F1,+F2)\" class=\"impl\"><a href=\"#impl-ContainsToken%3CT%3E-for-(F1,+F2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F1, F2&gt; ContainsToken&lt;T&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(F1, F2)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    F1: ContainsToken&lt;T&gt;,\n    F2: ContainsToken&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_token\" class=\"method trait-impl\"><a href=\"#method.contains_token\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">contains_token</a>(&amp;self, token: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns true if self contains the token</div></details></div></details>","ContainsToken<T>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3C'r,+Postgres%3E-for-(T1,+T2)\" class=\"impl\"><a href=\"#impl-Decode%3C'r,+Postgres%3E-for-(T1,+T2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'r, T1, T2&gt; Decode&lt;'r, Postgres&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T1, T2)</a><div class=\"where\">where\n    T1: 'r + Type&lt;Postgres&gt; + for&lt;'a&gt; Decode&lt;'a, Postgres&gt;,\n    T2: 'r + Type&lt;Postgres&gt; + for&lt;'a&gt; Decode&lt;'a, Postgres&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>(\n    value: PgValueRef&lt;'r&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T1, T2)</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Decode a new value of this type using a raw value from the database.</div></details></div></details>","Decode<'r, Postgres>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-(T0,+T1)\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_core/1.0.228/src/serde_core/de/impls.rs.html#1481-1497\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-(T0,+T1)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T0, T1&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T0, T1)</a><div class=\"where\">where\n    T0: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt;,\n    T1: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_core/1.0.228/src/serde_core/de/impls.rs.html#1481-1497\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T0, T1)</a>, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde_core::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromRequest-for-(A,+B)\" class=\"impl\"><a href=\"#impl-FromRequest-for-(A,+B)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; FromRequest for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a><div class=\"where\">where\n    A: FromRequest + 'static,\n    B: FromRequest + 'static,</div></h3><div class=\"docblock\"><p>FromRequest implementation for tuple</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = Error</h4></section></summary><div class='docblock'>The associated error which can be returned.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = TupleFromRequest2&lt;A, B&gt;</h4></section></summary><div class='docblock'>Future that resolves to a <code>Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_request\" class=\"method trait-impl\"><a href=\"#method.from_request\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_request</a>(\n    req: &amp;HttpRequest,\n    payload: &amp;mut Payload,\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a> as FromRequest&gt;::Future</h4></section></summary><div class='docblock'>Create a <code>Self</code> from request parts asynchronously.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract\" class=\"method trait-impl\"><a href=\"#method.extract\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">extract</a>(req: &amp;HttpRequest) -&gt; Self::Future</h4></section></summary><div class='docblock'>Create a <code>Self</code> from request head asynchronously. <a>Read more</a></div></details></div></details>","FromRequest","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromRow%3C'r,+R%3E-for-(T1,+T2)\" class=\"impl\"><a href=\"#impl-FromRow%3C'r,+R%3E-for-(T1,+T2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'r, R, T1, T2&gt; FromRow&lt;'r, R&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T1, T2)</a><div class=\"where\">where\n    R: Row,\n    <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>: ColumnIndex&lt;R&gt;,\n    T1: Decode&lt;'r, &lt;R as Row&gt;::Database&gt; + Type&lt;&lt;R as Row&gt;::Database&gt;,\n    T2: Decode&lt;'r, &lt;R as Row&gt;::Database&gt; + Type&lt;&lt;R as Row&gt;::Database&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_row\" class=\"method trait-impl\"><a href=\"#method.from_row\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_row</a>(row: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'r R</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T1, T2)</a>, Error&gt;</h4></section></div></details>","FromRow<'r, R>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A,)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(&amp;self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A,)</a>) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A,)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A,)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(&amp;self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a>) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(&amp;self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C)</a>) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(&amp;self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D)</a>) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(&amp;self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E)</a>) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H, I&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H, I)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H, I, J&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H, I, J)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H, I, J, K&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J, K) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H, I, J, K)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H, I, J, K, L&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J, K, L) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H, I, J, K, L)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L,+M)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L,+M)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H, I, J, K, L, M&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J, K, L, M) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H, I, J, K, L, M)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L,+M,+N)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L,+M,+N)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H, I, J, K, L, M, N&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J, K, L, M, N) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H, I, J, K, L, M, N)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L,+M,+N,+O)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L,+M,+N,+O)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L,+M,+N,+O,+P)%3E-for-Func\" class=\"impl\"><a href=\"#impl-Handler%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L,+M,+N,+O,+P)%3E-for-Func\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Func, Fut, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P&gt; Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)</a>&gt; for Func<div class=\"where\">where\n    Func: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;Fut as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Future</a> = Fut</h4></section><section id=\"method.call\" class=\"method trait-impl\"><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">call</a>(\n    &amp;self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)</a>,\n) -&gt; &lt;Func as Handler&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)</a>&gt;&gt;::Future</h4></section></div></details>","Handler<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HttpServiceFactory-for-(A,+B)\" class=\"impl\"><a href=\"#impl-HttpServiceFactory-for-(A,+B)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; HttpServiceFactory for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a><div class=\"where\">where\n    A: HttpServiceFactory,\n    B: HttpServiceFactory,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.register\" class=\"method trait-impl\"><a href=\"#method.register\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">register</a>(self, config: &amp;mut AppService)</h4></section></div></details>","HttpServiceFactory","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Layer%3CS%3E-for-(L1,+L2)\" class=\"impl\"><a href=\"#impl-Layer%3CS%3E-for-(L1,+L2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, L1, L2&gt; Layer&lt;S&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(L1, L2)</a><div class=\"where\">where\n    L1: Layer&lt;&lt;L2 as Layer&lt;S&gt;&gt;::Service&gt;,\n    L2: Layer&lt;S&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Service\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Service\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Service</a> = &lt;L1 as Layer&lt;&lt;L2 as Layer&lt;S&gt;&gt;::Service&gt;&gt;::Service</h4></section></summary><div class='docblock'>The wrapped service</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.layer\" class=\"method trait-impl\"><a href=\"#method.layer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">layer</a>(&amp;self, service: S) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(L1, L2)</a> as Layer&lt;S&gt;&gt;::Service</h4></section></summary><div class='docblock'>Wrap the given service with the middleware, returning a new service\nthat has been decorated with the middleware.</div></details></div></details>","Layer<S>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Parser%3CI%3E-for-(P1,+P2)\" class=\"impl\"><a href=\"#impl-Parser%3CI%3E-for-(P1,+P2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, O1, O2, E, P1, P2&gt; Parser&lt;I&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(P1, P2)</a><div class=\"where\">where\n    E: ParseError&lt;I&gt;,\n    P1: Parser&lt;I, Output = O1, Error = E&gt;,\n    P2: Parser&lt;I, Output = O2, Error = E&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(O1, O2)</a></h4></section></summary><div class='docblock'>Type of the produced value</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = E</h4></section></summary><div class='docblock'>Error type of this parser</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.process\" class=\"method trait-impl\"><a href=\"#method.process\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">process</a>&lt;OM&gt;(\n    &amp;mut self,\n    i: I,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(I, &lt;&lt;OM as OutputMode&gt;::Output as Mode&gt;::Output&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(P1, P2)</a> as Parser&lt;I&gt;&gt;::Output&gt;), Err&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(P1, P2)</a> as Parser&lt;I&gt;&gt;::Error, &lt;&lt;OM as OutputMode&gt;::Error as Mode&gt;::Output&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(P1, P2)</a> as Parser&lt;I&gt;&gt;::Error&gt;&gt;&gt;<div class=\"where\">where\n    OM: OutputMode,</div></h4></section></summary><div class='docblock'>A parser takes in input type, and returns a <code>Result</code> containing\neither the remaining input and the output value, or an error</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse\" class=\"method trait-impl\"><a href=\"#method.parse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse</a>(\n    &amp;mut self,\n    input: Input,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(Input, Self::Output), Err&lt;Self::Error&gt;&gt;</h4></section></summary><div class='docblock'>A parser takes in input type, and returns a <code>Result</code> containing\neither the remaining input and the output value, or an error</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_complete\" class=\"method trait-impl\"><a href=\"#method.parse_complete\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_complete</a>(\n    &amp;mut self,\n    input: Input,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(Input, Self::Output), Err&lt;Self::Error&gt;&gt;</h4></section></summary><div class='docblock'>A parser takes in input type, and returns a <code>Result</code> containing\neither the remaining input and the output value, or an error</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method trait-impl\"><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map</a>&lt;G, O2&gt;(self, g: G) -&gt; Map&lt;Self, G&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Self::Output) -&gt; O2,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Maps a function over the result of a parser</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_res\" class=\"method trait-impl\"><a href=\"#method.map_res\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_res</a>&lt;G, O2, E2&gt;(self, g: G) -&gt; MapRes&lt;Self, G&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Self::Output) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;O2, E2&gt;,\n    Self::Error: FromExternalError&lt;Input, E2&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Applies a function returning a <code>Result</code> over the result of a parser.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_opt\" class=\"method trait-impl\"><a href=\"#method.map_opt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_opt</a>&lt;G, O2&gt;(self, g: G) -&gt; MapOpt&lt;Self, G&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Self::Output) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;O2&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Applies a function returning an <code>Option</code> over the result of a parser.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flat_map\" class=\"method trait-impl\"><a href=\"#method.flat_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">flat_map</a>&lt;G, H&gt;(self, g: G) -&gt; FlatMap&lt;Self, G&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Self::Output) -&gt; H,\n    H: Parser&lt;Input, Error = Self::Error&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates a second parser from the output of the first one, then apply over the rest of the input</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method trait-impl\"><a href=\"#method.and_then\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_then</a>&lt;G&gt;(self, g: G) -&gt; AndThen&lt;Self, G&gt;<div class=\"where\">where\n    G: Parser&lt;Self::Output, Error = Self::Error&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Applies a second parser over the output of the first one</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method trait-impl\"><a href=\"#method.and\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and</a>&lt;G, O2&gt;(self, g: G) -&gt; And&lt;Self, G&gt;<div class=\"where\">where\n    G: Parser&lt;Input, Output = O2, Error = Self::Error&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Applies a second parser after the first one, return their results as a tuple</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method trait-impl\"><a href=\"#method.or\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">or</a>&lt;G&gt;(self, g: G) -&gt; Or&lt;Self, G&gt;<div class=\"where\">where\n    G: Parser&lt;Input, Output = Self::Output, Error = Self::Error&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Applies a second parser over the input if the first one failed</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into\" class=\"method trait-impl\"><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into</a>&lt;O2, E2&gt;(self) -&gt; Into&lt;Self, O2, E2&gt;<div class=\"where\">where\n    O2: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Self::Output&gt;,\n    E2: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Self::Error&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>automatically converts the parser’s output and error values to another type, as long as they\nimplement the <code>From</code> trait</div></details></div></details>","Parser<I>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Parser%3CI,+(O0,+O1),+E%3E-for-(P0,+P1)\" class=\"impl\"><a href=\"#impl-Parser%3CI,+(O0,+O1),+E%3E-for-(P0,+P1)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, O0, O1, E, P0, P1&gt; Parser&lt;I, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(O0, O1)</a>, E&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(P0, P1)</a><div class=\"where\">where\n    I: Stream,\n    E: ParserError&lt;I&gt;,\n    P0: Parser&lt;I, O0, E&gt;,\n    P1: Parser&lt;I, O1, E&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_next\" class=\"method trait-impl\"><a href=\"#method.parse_next\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_next</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(O0, O1)</a>, E&gt;</h4></section></summary><div class='docblock'>Take tokens from the [<code>Stream</code>], turning it into the output <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse\" class=\"method trait-impl\"><a href=\"#method.parse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse</a>(\n    &amp;mut self,\n    input: I,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;O, ParseError&lt;I, &lt;E as ParserError&lt;I&gt;&gt;::Inner&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    I: Stream + StreamIsPartial,\n    E: ParserError&lt;I&gt;,\n    &lt;E as ParserError&lt;I&gt;&gt;::Inner: ParserError&lt;I&gt;,</div></h4></section></summary><div class='docblock'>Parse all of <code>input</code>, generating <code>O</code> from it <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_peek\" class=\"method trait-impl\"><a href=\"#method.parse_peek\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_peek</a>(&amp;mut self, input: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(I, O)</a>, E&gt;</h4></section></summary><div class='docblock'>Take tokens from the [<code>Stream</code>], turning it into the output <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">by_ref</a>(&amp;mut self) -&gt; ByRef&lt;'_, Self, I, O, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Treat <code>&amp;mut Self</code> as a parser <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.value\" class=\"method trait-impl\"><a href=\"#method.value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value</a>&lt;O2&gt;(self, val: O2) -&gt; Value&lt;Self, I, O, O2, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    O2: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Produce the provided value <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_value\" class=\"method trait-impl\"><a href=\"#method.default_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default_value</a>&lt;O2&gt;(self) -&gt; DefaultValue&lt;Self, I, O, O2, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    O2: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class='docblock'>Produce a type’s default value <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.void\" class=\"method trait-impl\"><a href=\"#method.void\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">void</a>(self) -&gt; Void&lt;Self, I, O, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Discards the output of the <code>Parser</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.output_into\" class=\"method trait-impl\"><a href=\"#method.output_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">output_into</a>&lt;O2&gt;(self) -&gt; OutputInto&lt;Self, I, O, O2, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    O: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;O2&gt;,</div></h4></section></summary><div class='docblock'>Convert the parser’s output to another type using <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\"><code>std::convert::From</code></a> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method trait-impl\"><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">take</a>(self) -&gt; Take&lt;Self, I, O, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    I: Stream,</div></h4></section></summary><div class='docblock'>Produce the consumed input as produced value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_taken\" class=\"method trait-impl\"><a href=\"#method.with_taken\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_taken</a>(self) -&gt; WithTaken&lt;Self, I, O, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    I: Stream,</div></h4></section></summary><div class='docblock'>Produce the consumed input with the output <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.span\" class=\"method trait-impl\"><a href=\"#method.span\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">span</a>(self) -&gt; Span&lt;Self, I, O, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    I: Stream + Location,</div></h4></section></summary><div class='docblock'>Produce the location of the consumed input as produced value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_span\" class=\"method trait-impl\"><a href=\"#method.with_span\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_span</a>(self) -&gt; WithSpan&lt;Self, I, O, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    I: Stream + Location,</div></h4></section></summary><div class='docblock'>Produce the location of consumed input with the output <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method trait-impl\"><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map</a>&lt;G, O2&gt;(self, map: G) -&gt; Map&lt;Self, G, I, O, O2, E&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(O) -&gt; O2,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Maps a function over the output of a parser <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_map\" class=\"method trait-impl\"><a href=\"#method.try_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_map</a>&lt;G, O2, E2&gt;(self, map: G) -&gt; TryMap&lt;Self, G, I, O, O2, E, E2&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(O) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;O2, E2&gt;,\n    I: Stream,\n    E: FromExternalError&lt;I, E2&gt; + ParserError&lt;I&gt;,</div></h4></section></summary><div class='docblock'>Applies a function returning a <code>Result</code> over the output of a parser. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.verify_map\" class=\"method trait-impl\"><a href=\"#method.verify_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">verify_map</a>&lt;G, O2&gt;(self, map: G) -&gt; VerifyMap&lt;Self, G, I, O, O2, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(O) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;O2&gt;,\n    I: Stream,\n    E: ParserError&lt;I&gt;,</div></h4></section></summary><div class='docblock'>Apply both [<code>Parser::verify</code>] and [<code>Parser::map</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flat_map\" class=\"method trait-impl\"><a href=\"#method.flat_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">flat_map</a>&lt;G, H, O2&gt;(self, map: G) -&gt; FlatMap&lt;Self, G, H, I, O, O2, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(O) -&gt; H,\n    H: Parser&lt;I, O2, E&gt;,</div></h4></section></summary><div class='docblock'>Creates a parser from the output of this one <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method trait-impl\"><a href=\"#method.and_then\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_then</a>&lt;G, O2&gt;(self, inner: G) -&gt; AndThen&lt;Self, G, I, O, O2, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    G: Parser&lt;O, O2, E&gt;,\n    O: StreamIsPartial,\n    I: Stream,</div></h4></section></summary><div class='docblock'>Applies a second parser over the output of the first one <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_to\" class=\"method trait-impl\"><a href=\"#method.parse_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_to</a>&lt;O2&gt;(self) -&gt; ParseTo&lt;Self, I, O, O2, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    I: Stream,\n    O: ParseSlice&lt;O2&gt;,\n    E: ParserError&lt;I&gt;,</div></h4></section></summary><div class='docblock'>Apply <a href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\"><code>std::str::FromStr</code></a> to the output of the parser <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.verify\" class=\"method trait-impl\"><a href=\"#method.verify\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">verify</a>&lt;G, O2&gt;(self, filter: G) -&gt; Verify&lt;Self, G, I, O, O2, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;O2</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a>,\n    I: Stream,\n    O: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;O2&gt;,\n    E: ParserError&lt;I&gt;,\n    O2: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Returns the output of the child parser if it satisfies a verification function. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.context\" class=\"method trait-impl\"><a href=\"#method.context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">context</a>&lt;C&gt;(self, context: C) -&gt; Context&lt;Self, I, O, E, C&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    I: Stream,\n    E: AddContext&lt;I, C&gt; + ParserError&lt;I&gt;,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h4></section></summary><div class='docblock'>If parsing fails, add context to the error <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.context_with\" class=\"method trait-impl\"><a href=\"#method.context_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">context_with</a>&lt;F, C, FI&gt;(\n    self,\n    context: F,\n) -&gt; ContextWith&lt;Self, I, O, E, F, C, FI&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    I: Stream,\n    E: AddContext&lt;I, C&gt; + ParserError&lt;I&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; FI + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    FI: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = C&gt;,</div></h4></section></summary><div class='docblock'>If parsing fails, dynamically add context to the error <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_err\" class=\"method trait-impl\"><a href=\"#method.map_err\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_err</a>&lt;G, E2&gt;(self, map: G) -&gt; MapErr&lt;Self, G, I, O, E, E2&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(E) -&gt; E2,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Maps a function over the error of a parser <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.complete_err\" class=\"method trait-impl\"><a href=\"#method.complete_err\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">complete_err</a>(self) -&gt; CompleteErr&lt;Self, I, O, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Transforms [<code>Incomplete</code>][crate::error::ErrMode::Incomplete] into [<code>Backtrack</code>][crate::error::ErrMode::Backtrack] <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.err_into\" class=\"method trait-impl\"><a href=\"#method.err_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">err_into</a>&lt;E2&gt;(self) -&gt; ErrInto&lt;Self, I, O, E, E2&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;E2&gt;,</div></h4></section></summary><div class='docblock'>Convert the parser’s error to another type using <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\"><code>std::convert::From</code></a></div></details></div></details>","Parser<I, (O0, O1), E>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Parser%3CInput%3E-for-(A,+B)\" class=\"impl\"><a href=\"#impl-Parser%3CInput%3E-for-(A,+B)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Input, A, B&gt; Parser&lt;Input&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a><div class=\"where\">where\n    Input: Stream,\n    A: Parser&lt;Input&gt;,\n    B: Parser&lt;Input&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = (&lt;A as Parser&lt;Input&gt;&gt;::Output, &lt;B as Parser&lt;Input&gt;&gt;::Output)</h4></section></summary><div class='docblock'>The type which is returned if the parser is successful.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.PartialState\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PartialState\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">PartialState</a> = PartialState2&lt;SequenceState&lt;&lt;A as Parser&lt;Input&gt;&gt;::Output, &lt;A as Parser&lt;Input&gt;&gt;::PartialState&gt;, SequenceState&lt;&lt;B as Parser&lt;Input&gt;&gt;::Output, &lt;B as Parser&lt;Input&gt;&gt;::PartialState&gt;&gt;</h4></section></summary><div class='docblock'>Determines the state necessary to resume parsing after more input is supplied. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_error\" class=\"method trait-impl\"><a href=\"#method.add_error\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">add_error</a>(&amp;mut self, errors: &amp;mut Tracked&lt;&lt;Input as StreamOnce&gt;::Error&gt;)</h4></section></summary><div class='docblock'>Adds the first error that would normally be returned by this parser if it failed with an\n<code>PeekErr</code> result. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse\" class=\"method trait-impl\"><a href=\"#method.parse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse</a>(\n    &amp;mut self,\n    input: Input,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(Self::Output, Input), &lt;Input as StreamOnce&gt;::Error&gt;</h4></section></summary><div class='docblock'>Entry point of the parser. Takes some input and tries to parse it. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_with_state\" class=\"method trait-impl\"><a href=\"#method.parse_with_state\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_with_state</a>(\n    &amp;mut self,\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut Input</a>,\n    state: &amp;mut Self::PartialState,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self::Output, &lt;Input as StreamOnce&gt;::Error&gt;</h4></section></summary><div class='docblock'>Entry point of the parser when using partial parsing.\nTakes some input and tries to parse it. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_stream\" class=\"method trait-impl\"><a href=\"#method.parse_stream\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_stream</a>(\n    &amp;mut self,\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut Input</a>,\n) -&gt; ParseResult&lt;Self::Output, &lt;Input as StreamOnce&gt;::Error&gt;</h4></section></summary><div class='docblock'>Parses using the stream <code>input</code> by calling <a href=\"super::stream::StreamOnce::uncons\"><code>Stream::uncons</code></a> one or more times. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_lazy\" class=\"method trait-impl\"><a href=\"#method.parse_lazy\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_lazy</a>(\n    &amp;mut self,\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut Input</a>,\n) -&gt; ParseResult&lt;Self::Output, &lt;Input as StreamOnce&gt;::Error&gt;</h4></section></summary><div class='docblock'>Parses using the stream <code>input</code> by calling <a href=\"super::stream::StreamOnce::uncons\"><code>Stream::uncons</code></a> one or more times. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_stream_partial\" class=\"method trait-impl\"><a href=\"#method.parse_stream_partial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_stream_partial</a>(\n    &amp;mut self,\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut Input</a>,\n    state: &amp;mut Self::PartialState,\n) -&gt; ParseResult&lt;Self::Output, &lt;Input as StreamOnce&gt;::Error&gt;</h4></section></summary><div class='docblock'>Like <code>parse_stream</code> but supports partial parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">by_ref</a>(&amp;mut self) -&gt; &amp;mut Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Borrows a parser instead of consuming it. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with\" class=\"method trait-impl\"><a href=\"#method.with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with</a>&lt;P2&gt;(self, p: P2) -&gt; With&lt;Self, P2&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    P2: Parser&lt;Input&gt;,</div></h4></section></summary><div class='docblock'>Discards the value of the <code>self</code> parser and returns the value of <code>p</code>.\nFails if any of the parsers fails. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip\" class=\"method trait-impl\"><a href=\"#method.skip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">skip</a>&lt;P2&gt;(self, p: P2) -&gt; Skip&lt;Self, P2&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    P2: Parser&lt;Input&gt;,</div></h4></section></summary><div class='docblock'>Discards the value of the <code>p</code> parser and returns the value of <code>self</code>.\nFails if any of the parsers fails. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method trait-impl\"><a href=\"#method.and\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and</a>&lt;P2&gt;(self, p: P2) -&gt; (Self, P2)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    P2: Parser&lt;Input&gt;,</div></h4></section></summary><div class='docblock'>Parses with <code>self</code> followed by <code>p</code>.\nSucceeds if both parsers succeed, otherwise fails.\nReturns a tuple with both values on success. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method trait-impl\"><a href=\"#method.or\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">or</a>&lt;P2&gt;(self, p: P2) -&gt; Or&lt;Self, P2&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    P2: Parser&lt;Input, Output = Self::Output&gt;,</div></h4></section></summary><div class='docblock'>Returns a parser which attempts to parse using <code>self</code>. If <code>self</code> fails without committing\nit tries to consume the same input using <code>p</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.then\" class=\"method trait-impl\"><a href=\"#method.then\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">then</a>&lt;N, F&gt;(self, f: F) -&gt; Then&lt;Self, F&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Self::Output) -&gt; N,\n    N: Parser&lt;Input&gt;,</div></h4></section></summary><div class='docblock'>Parses using <code>self</code> and then passes the value to <code>f</code> which returns a parser used to parse\nthe rest of the input. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.then_partial\" class=\"method trait-impl\"><a href=\"#method.then_partial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">then_partial</a>&lt;N, F&gt;(self, f: F) -&gt; ThenPartial&lt;Self, F&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;mut Self::Output) -&gt; N,\n    N: Parser&lt;Input&gt;,</div></h4></section></summary><div class='docblock'>Variant of <a href=\"Parser::then\"><code>then</code></a> which parses using <code>self</code> and then passes the value to <code>f</code> as a <code>&amp;mut</code> reference. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.then_ref\" class=\"method trait-impl\"><a href=\"#method.then_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">then_ref</a>&lt;N, F&gt;(self, f: F) -&gt; ThenRef&lt;Self, F&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;Self::Output) -&gt; N,\n    N: Parser&lt;Input&gt;,</div></h4></section></summary><div class='docblock'>Parses using <code>self</code> and then passes a reference to the value to <code>f</code> which returns a parser\nused to parse the rest of the input. The value is then combined with the output of <code>f</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method trait-impl\"><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map</a>&lt;F, B&gt;(self, f: F) -&gt; Map&lt;Self, F&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Self::Output) -&gt; B,</div></h4></section></summary><div class='docblock'>Uses <code>f</code> to map over the parsed value. <a>Read more</a></div></details><section id=\"method.map_input\" class=\"method trait-impl\"><a href=\"#method.map_input\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_input</a>&lt;F, B&gt;(self, f: F) -&gt; MapInput&lt;Self, F&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Self::Output, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut Input</a>) -&gt; B,</div></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.flat_map\" class=\"method trait-impl\"><a href=\"#method.flat_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">flat_map</a>&lt;F, B&gt;(self, f: F) -&gt; FlatMap&lt;Self, F&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Self::Output) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;B, &lt;Input as StreamOnce&gt;::Error&gt;,</div></h4></section></summary><div class='docblock'>Uses <code>f</code> to map over the output of <code>self</code>. If <code>f</code> returns an error the parser fails. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.message\" class=\"method trait-impl\"><a href=\"#method.message\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">message</a>&lt;S&gt;(self, msg: S) -&gt; Message&lt;Self, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    S: for&lt;'s&gt; ErrorInfo&lt;'s, &lt;Input as StreamOnce&gt;::Token, &lt;Input as StreamOnce&gt;::Range&gt;,</div></h4></section></summary><div class='docblock'>Parses with <code>self</code> and if it fails, adds the message <code>msg</code> to the error. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expected\" class=\"method trait-impl\"><a href=\"#method.expected\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">expected</a>&lt;S&gt;(self, msg: S) -&gt; Expected&lt;Self, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    S: for&lt;'s&gt; ErrorInfo&lt;'s, &lt;Input as StreamOnce&gt;::Token, &lt;Input as StreamOnce&gt;::Range&gt;,</div></h4></section></summary><div class='docblock'>Parses with <code>self</code> and if it fails without consuming any input any expected errors are\nreplaced by <code>msg</code>. <code>msg</code> is then used in error messages as “Expected <code>msg</code>”. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.silent\" class=\"method trait-impl\"><a href=\"#method.silent\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">silent</a>(self) -&gt; Silent&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Parses with <code>self</code>, if it fails without consuming any input any expected errors that would\notherwise be emitted by <code>self</code> are suppressed. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method trait-impl\"><a href=\"#method.and_then\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_then</a>&lt;F, O, E&gt;(self, f: F) -&gt; AndThen&lt;Self, F&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + Parser&lt;Input&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Self::Output) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;O, E&gt;,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;&lt;&lt;Input as StreamOnce&gt;::Error as ParseError&lt;&lt;Input as StreamOnce&gt;::Token, &lt;Input as StreamOnce&gt;::Range, &lt;Input as StreamOnce&gt;::Position&gt;&gt;::StreamError&gt;,</div></h4></section></summary><div class='docblock'>Parses with <code>self</code> and applies <code>f</code> on the result if <code>self</code> parses successfully.\n<code>f</code> may optionally fail with an error which is automatically converted to a <code>ParseError</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method trait-impl\"><a href=\"#method.iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">iter</a>(\n    self,\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut Input</a>,\n) -&gt; Iter&lt;'_, Input, Self, Self::PartialState, FirstMode&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + Parser&lt;Input&gt;,</div></h4></section></summary><div class='docblock'>Creates an iterator from a parser and a state. Can be used as an alternative to <a href=\"repeat::many\"><code>many</code></a>\nwhen collecting directly into a <code>Extend</code> type is not desirable. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_iter\" class=\"method trait-impl\"><a href=\"#method.partial_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">partial_iter</a>&lt;'a, 's, M&gt;(\n    self,\n    mode: M,\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a mut Input</a>,\n    partial_state: &amp;'s mut Self::PartialState,\n) -&gt; Iter&lt;'a, Input, Self, &amp;'s mut Self::PartialState, M&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + Parser&lt;Input&gt;,\n    M: ParseMode,</div></h4></section></summary><div class='docblock'>Creates an iterator from a parser and a state. Can be used as an alternative to <a href=\"repeat::many\"><code>many</code></a>\nwhen collecting directly into a <code>Extend</code> type is not desirable. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.boxed\" class=\"method trait-impl\"><a href=\"#method.boxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">boxed</a>&lt;'a&gt;(\n    self,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn Parser&lt;Input, PartialState = Self::PartialState, Output = Self::Output&gt; + 'a&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</div></h4></section></summary><div class='docblock'>Turns the parser into a trait object by putting it in a <code>Box</code>. Can be used to easily\nreturn parsers from functions without naming the type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.left\" class=\"method trait-impl\"><a href=\"#method.left\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">left</a>&lt;R&gt;(self) -&gt; Either&lt;Self, R&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    R: Parser&lt;Input, Output = Self::Output&gt;,</div></h4></section></summary><div class='docblock'>Wraps the parser into the <a href=\"combinator::Either\"><code>Either</code></a> enum which allows combinators such as <a href=\"Parser::then\"><code>then</code></a> to return\nmultiple different parser types (merging them to one) <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.right\" class=\"method trait-impl\"><a href=\"#method.right\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">right</a>&lt;L&gt;(self) -&gt; Either&lt;L, Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    L: Parser&lt;Input, Output = Self::Output&gt;,</div></h4></section></summary><div class='docblock'>Wraps the parser into the <a href=\"combinator::Either\"><code>Either</code></a> enum which allows combinators such as <a href=\"Parser::then\"><code>then</code></a> to return\nmultiple different parser types (merging them to one) <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spanned\" class=\"method trait-impl\"><a href=\"#method.spanned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">spanned</a>(self) -&gt; Spanned&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Marks errors produced inside the <code>self</code> parser with the span from the start of the parse to\nthe end of it. <a>Read more</a></div></details></div></details>","Parser<Input>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Permutation%3CI,+(O1,+O2),+Error%3E-for-(P1,+P2)\" class=\"impl\"><a href=\"#impl-Permutation%3CI,+(O1,+O2),+Error%3E-for-(P1,+P2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, O1, O2, Error, P1, P2&gt; Permutation&lt;I, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(O1, O2)</a>, Error&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(P1, P2)</a><div class=\"where\">where\n    I: Stream,\n    Error: ParserError&lt;I&gt;,\n    P1: Parser&lt;I, O1, Error&gt;,\n    P2: Parser&lt;I, O2, Error&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.permutation\" class=\"method trait-impl\"><a href=\"#method.permutation\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">permutation</a>(&amp;mut self, input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(O1, O2)</a>, Error&gt;</h4></section></summary><div class='docblock'>Tries to apply all parsers in the tuple in various orders until all of them succeed</div></details></div></details>","Permutation<I, (O1, O2), Error>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PgHasArrayType-for-(T1,+T2)\" class=\"impl\"><a href=\"#impl-PgHasArrayType-for-(T1,+T2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T1, T2&gt; PgHasArrayType for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T1, T2)</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.array_type_info\" class=\"method trait-impl\"><a href=\"#method.array_type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">array_type_info</a>() -&gt; PgTypeInfo</h4></section><section id=\"method.array_compatible\" class=\"method trait-impl\"><a href=\"#method.array_compatible\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">array_compatible</a>(ty: &amp;PgTypeInfo) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></div></details>","PgHasArrayType","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-(T0,+T1)\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_core/1.0.228/src/serde_core/ser/impls.rs.html#404-420\">Source</a><a href=\"#impl-Serialize-for-(T0,+T1)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T0, T1&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T0, T1)</a><div class=\"where\">where\n    T0: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a>,\n    T1: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_core/1.0.228/src/serde_core/ser/impls.rs.html#404-420\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde_core::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde_core::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryIntoHeaderPair-for-(%26str,+V)\" class=\"impl\"><a href=\"#impl-TryIntoHeaderPair-for-(%26str,+V)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;V&gt; TryIntoHeaderPair for (&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>, V)<div class=\"where\">where\n    V: TryIntoHeaderValue,\n    &lt;V as TryIntoHeaderValue&gt;::Error: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/header/value/struct.InvalidHeaderValue.html\" title=\"struct http::header::value::InvalidHeaderValue\">InvalidHeaderValue</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = InvalidHeaderPart</h4></section><section id=\"method.try_into_pair\" class=\"method trait-impl\"><a href=\"#method.try_into_pair\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_into_pair</a>(\n    self,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/header/name/struct.HeaderName.html\" title=\"struct http::header::name::HeaderName\">HeaderName</a>, <a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/header/value/struct.HeaderValue.html\" title=\"struct http::header::value::HeaderValue\">HeaderValue</a>), &lt;(&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>, V) as TryIntoHeaderPair&gt;::Error&gt;</h4></section></div></details>","TryIntoHeaderPair","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Tuple%3CInput,+(A,+B),+Error%3E-for-(FnA,+FnB)\" class=\"impl\"><a href=\"#impl-Tuple%3CInput,+(A,+B),+Error%3E-for-(FnA,+FnB)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Input, A, B, Error, FnA, FnB&gt; Tuple&lt;Input, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a>, Error&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(FnA, FnB)</a><div class=\"where\">where\n    Input: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    Error: ParseError&lt;Input&gt;,\n    FnA: Parser&lt;Input, Output = A, Error = Error&gt;,\n    FnB: Parser&lt;Input, Output = B, Error = Error&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_tuple\" class=\"method trait-impl\"><a href=\"#method.parse_tuple\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_tuple</a>(&amp;mut self, input: Input) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(Input, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a>), Err&lt;Error&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 8.0.0: <code>Parser</code> is directly implemented for tuples</span></div></span><div class='docblock'>Parses the input and returns a tuple of results of each parser.</div></details></div></details>","Tuple<Input, (A, B), Error>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Type%3CPostgres%3E-for-(T1,+T2)\" class=\"impl\"><a href=\"#impl-Type%3CPostgres%3E-for-(T1,+T2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T1, T2&gt; Type&lt;Postgres&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T1, T2)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_info</a>() -&gt; PgTypeInfo</h4></section></summary><div class='docblock'>Returns the canonical SQL type for this Rust type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compatible\" class=\"method trait-impl\"><a href=\"#method.compatible\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compatible</a>(ty: &amp;&lt;DB as Database&gt;::TypeInfo) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if this Rust type is compatible with the given SQL type. <a>Read more</a></div></details></div></details>","Type<Postgres>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yokeable%3C'a%3E-for-(T1,+T2)\" class=\"impl\"><a href=\"#impl-Yokeable%3C'a%3E-for-(T1,+T2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T1, T2&gt; Yokeable&lt;'a&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T1, T2)</a><div class=\"where\">where\n    T1: 'static + for&lt;'b&gt; Yokeable&lt;'b&gt;,\n    T2: 'static + for&lt;'b&gt; Yokeable&lt;'b&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = (&lt;T1 as Yokeable&lt;'a&gt;&gt;::Output, &lt;T2 as Yokeable&lt;'a&gt;&gt;::Output)</h4></section></summary><div class='docblock'>This type MUST be <code>Self</code> with the <code>'static</code> replaced with <code>'a</code>, i.e. <code>Self&lt;'a&gt;</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform\" class=\"method trait-impl\"><a href=\"#method.transform\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform</a>(&amp;'a self) -&gt; &amp;'a &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T1, T2)</a> as Yokeable&lt;'a&gt;&gt;::Output</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a Self&lt;'static&gt;</code> and <code>&amp;'a Self&lt;'a&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_owned\" class=\"method trait-impl\"><a href=\"#method.transform_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform_owned</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T1, T2)</a> as Yokeable&lt;'a&gt;&gt;::Output</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>Self&lt;'static&gt;</code> and <code>Self&lt;'a&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make\" class=\"method trait-impl\"><a href=\"#method.make\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">make</a>(from: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T1, T2)</a> as Yokeable&lt;'a&gt;&gt;::Output) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T1, T2)</a></h4></section></summary><div class='docblock'>This method can be used to cast away <code>Self&lt;'a&gt;</code>’s lifetime. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_mut\" class=\"method trait-impl\"><a href=\"#method.transform_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform_mut</a>&lt;F&gt;(&amp;'a mut self, f: F)<div class=\"where\">where\n    F: 'static + for&lt;'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'b mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T1, T2)</a> as Yokeable&lt;'a&gt;&gt;::Output),</div></h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a mut Self&lt;'static&gt;</code> and <code>&amp;'a mut Self&lt;'a&gt;</code>,\nand pass it to <code>f</code>. <a>Read more</a></div></details></div></details>","Yokeable<'a>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroFrom%3C'zf,+(C1,+C2)%3E-for-(T1,+T2)\" class=\"impl\"><a href=\"#impl-ZeroFrom%3C'zf,+(C1,+C2)%3E-for-(T1,+T2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'zf, C1, T1, C2, T2&gt; ZeroFrom&lt;'zf, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(C1, C2)</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T1, T2)</a><div class=\"where\">where\n    T1: ZeroFrom&lt;'zf, C1&gt;,\n    T2: ZeroFrom&lt;'zf, C2&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero_from\" class=\"method trait-impl\"><a href=\"#method.zero_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zero_from</a>(other: &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(C1, C2)</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(T1, T2)</a></h4></section></summary><div class='docblock'>Clone the other <code>C</code> into a struct that may retain references into <code>C</code>.</div></details></div></details>","ZeroFrom<'zf, (C1, C2)>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroMapKV%3C'a%3E-for-(A,+B)\" class=\"impl\"><a href=\"#impl-ZeroMapKV%3C'a%3E-for-(A,+B)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; ZeroMapKV&lt;'a&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + AsULE + 'static,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + AsULE + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Container\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Container\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Container</a> = ZeroVec&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a>&gt;</h4></section></summary><div class='docblock'>The container that can be used with this type: [<code>ZeroVec</code>] or [<code>VarZeroVec</code>].</div></details><section id=\"associatedtype.Slice\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Slice\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Slice</a> = ZeroSlice&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a>&gt;</h4></section><details class=\"toggle\" open><summary><section id=\"associatedtype.GetType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.GetType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">GetType</a> = Tuple2ULE&lt;&lt;A as AsULE&gt;::ULE, &lt;B as AsULE&gt;::ULE&gt;</h4></section></summary><div class='docblock'>The type produced by <code>Container::get()</code> <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.OwnedType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.OwnedType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">OwnedType</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a></h4></section></summary><div class='docblock'>The type produced by <code>Container::replace()</code> and <code>Container::remove()</code>,\nalso used during deserialization. If <code>Self</code> is human readable serialized,\ndeserializing to <code>Self::OwnedType</code> should produce the same value once\npassed through <code>Self::owned_as_self()</code> <a>Read more</a></div></details></div></details>","ZeroMapKV<'a>","mcaptcha::static_assets::static_files::assets::Img"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroize-for-(A,+B)\" class=\"impl\"><a href=\"#impl-Zeroize-for-(A,+B)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; Zeroize for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a><div class=\"where\">where\n    A: Zeroize,\n    B: Zeroize,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroize\" class=\"method trait-impl\"><a href=\"#method.zeroize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zeroize</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Zero out this object from memory using Rust intrinsics which ensure the\nzeroization operation is not “optimized away” by the compiler.</div></details></div></details>","Zeroize","mcaptcha::static_assets::static_files::assets::Img"],["<section id=\"impl-ZeroizeOnDrop-for-(A,+B)\" class=\"impl\"><a href=\"#impl-ZeroizeOnDrop-for-(A,+B)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; ZeroizeOnDrop for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(A, B)</a><div class=\"where\">where\n    A: ZeroizeOnDrop,\n    B: ZeroizeOnDrop,</div></h3></section>","ZeroizeOnDrop","mcaptcha::static_assets::static_files::assets::Img"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[135985]}